/*
 * This file is generated by jOOQ.
 */
package ru.mai.lessons.rpks.jooq.model.tables;


import java.util.function.Function;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Function6;
import org.jooq.Identity;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Records;
import org.jooq.Row6;
import org.jooq.Schema;
import org.jooq.SelectField;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;

import ru.mai.lessons.rpks.jooq.model.Keys;
import ru.mai.lessons.rpks.jooq.model.Public;
import ru.mai.lessons.rpks.jooq.model.tables.records.FilterRulesRecord;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({"all", "unchecked", "rawtypes"})
public class FilterRules extends TableImpl<FilterRulesRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>public.filter_rules</code>
     */
    public static final FilterRules FILTER_RULES = new FilterRules();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<FilterRulesRecord> getRecordType() {
        return FilterRulesRecord.class;
    }

    /**
     * The column <code>public.filter_rules.id</code>.
     */
    public final TableField<FilterRulesRecord, Integer> ID = createField(DSL.name("id"), SQLDataType.INTEGER.nullable(false).identity(true), this, "");

    /**
     * The column <code>public.filter_rules.filter_id</code>.
     */
    public final TableField<FilterRulesRecord, Long> FILTER_ID = createField(DSL.name("filter_id"), SQLDataType.BIGINT.nullable(false), this, "");

    /**
     * The column <code>public.filter_rules.rule_id</code>.
     */
    public final TableField<FilterRulesRecord, Long> RULE_ID = createField(DSL.name("rule_id"), SQLDataType.BIGINT.nullable(false), this, "");

    /**
     * The column <code>public.filter_rules.field_name</code>.
     */
    public final TableField<FilterRulesRecord, String> FIELD_NAME = createField(DSL.name("field_name"), SQLDataType.CLOB.nullable(false), this, "");

    /**
     * The column <code>public.filter_rules.filter_function_name</code>.
     */
    public final TableField<FilterRulesRecord, String> FILTER_FUNCTION_NAME = createField(DSL.name("filter_function_name"), SQLDataType.CLOB.nullable(false), this, "");

    /**
     * The column <code>public.filter_rules.filter_value</code>.
     */
    public final TableField<FilterRulesRecord, String> FILTER_VALUE = createField(DSL.name("filter_value"), SQLDataType.CLOB.nullable(false), this, "");

    private FilterRules(Name alias, Table<FilterRulesRecord> aliased) {
        this(alias, aliased, null);
    }

    private FilterRules(Name alias, Table<FilterRulesRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    /**
     * Create an aliased <code>public.filter_rules</code> table reference
     */
    public FilterRules(String alias) {
        this(DSL.name(alias), FILTER_RULES);
    }

    /**
     * Create an aliased <code>public.filter_rules</code> table reference
     */
    public FilterRules(Name alias) {
        this(alias, FILTER_RULES);
    }

    /**
     * Create a <code>public.filter_rules</code> table reference
     */
    public FilterRules() {
        this(DSL.name("filter_rules"), null);
    }

    public <O extends Record> FilterRules(Table<O> child, ForeignKey<O, FilterRulesRecord> key) {
        super(child, key, FILTER_RULES);
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : Public.PUBLIC;
    }

    @Override
    public Identity<FilterRulesRecord, Integer> getIdentity() {
        return (Identity<FilterRulesRecord, Integer>) super.getIdentity();
    }

    @Override
    public UniqueKey<FilterRulesRecord> getPrimaryKey() {
        return Keys.FILTER_RULES_PKEY;
    }

    @Override
    public FilterRules as(String alias) {
        return new FilterRules(DSL.name(alias), this);
    }

    @Override
    public FilterRules as(Name alias) {
        return new FilterRules(alias, this);
    }

    @Override
    public FilterRules as(Table<?> alias) {
        return new FilterRules(alias.getQualifiedName(), this);
    }

    /**
     * Rename this table
     */
    @Override
    public FilterRules rename(String name) {
        return new FilterRules(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public FilterRules rename(Name name) {
        return new FilterRules(name, null);
    }

    /**
     * Rename this table
     */
    @Override
    public FilterRules rename(Table<?> name) {
        return new FilterRules(name.getQualifiedName(), null);
    }

    // -------------------------------------------------------------------------
    // Row6 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row6<Integer, Long, Long, String, String, String> fieldsRow() {
        return (Row6) super.fieldsRow();
    }

    /**
     * Convenience mapping calling {@link SelectField#convertFrom(Function)}.
     */
    public <U> SelectField<U> mapping(Function6<? super Integer, ? super Long, ? super Long, ? super String, ? super String, ? super String, ? extends U> from) {
        return convertFrom(Records.mapping(from));
    }

    /**
     * Convenience mapping calling {@link SelectField#convertFrom(Class,
     * Function)}.
     */
    public <U> SelectField<U> mapping(Class<U> toType, Function6<? super Integer, ? super Long, ? super Long, ? super String, ? super String, ? super String, ? extends U> from) {
        return convertFrom(toType, Records.mapping(from));
    }
}
